// source: songs.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var google_protobuf_empty_pb = require('google-protobuf/google/protobuf/empty_pb.js');
goog.object.extend(proto, google_protobuf_empty_pb);
goog.exportSymbol('proto.songs.AddSongsRequest', null, global);
goog.exportSymbol('proto.songs.AddSongsResponse', null, global);
goog.exportSymbol('proto.songs.GetSongsResponse', null, global);
goog.exportSymbol('proto.songs.Song', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.songs.Song = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.songs.Song, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.songs.Song.displayName = 'proto.songs.Song';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.songs.GetSongsResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.songs.GetSongsResponse.repeatedFields_, null);
};
goog.inherits(proto.songs.GetSongsResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.songs.GetSongsResponse.displayName = 'proto.songs.GetSongsResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.songs.AddSongsRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.songs.AddSongsRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.songs.AddSongsRequest.displayName = 'proto.songs.AddSongsRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.songs.AddSongsResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.songs.AddSongsResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.songs.AddSongsResponse.displayName = 'proto.songs.AddSongsResponse';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.songs.Song.prototype.toObject = function(opt_includeInstance) {
  return proto.songs.Song.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.songs.Song} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.songs.Song.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    title: jspb.Message.getFieldWithDefault(msg, 2, ""),
    artist: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.songs.Song}
 */
proto.songs.Song.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.songs.Song;
  return proto.songs.Song.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.songs.Song} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.songs.Song}
 */
proto.songs.Song.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setTitle(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setArtist(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.songs.Song.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.songs.Song.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.songs.Song} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.songs.Song.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getTitle();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getArtist();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional int32 id = 1;
 * @return {number}
 */
proto.songs.Song.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.songs.Song} returns this
 */
proto.songs.Song.prototype.setId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string title = 2;
 * @return {string}
 */
proto.songs.Song.prototype.getTitle = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.songs.Song} returns this
 */
proto.songs.Song.prototype.setTitle = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string artist = 3;
 * @return {string}
 */
proto.songs.Song.prototype.getArtist = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.songs.Song} returns this
 */
proto.songs.Song.prototype.setArtist = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.songs.GetSongsResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.songs.GetSongsResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.songs.GetSongsResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.songs.GetSongsResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.songs.GetSongsResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    songsList: jspb.Message.toObjectList(msg.getSongsList(),
    proto.songs.Song.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.songs.GetSongsResponse}
 */
proto.songs.GetSongsResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.songs.GetSongsResponse;
  return proto.songs.GetSongsResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.songs.GetSongsResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.songs.GetSongsResponse}
 */
proto.songs.GetSongsResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.songs.Song;
      reader.readMessage(value,proto.songs.Song.deserializeBinaryFromReader);
      msg.addSongs(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.songs.GetSongsResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.songs.GetSongsResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.songs.GetSongsResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.songs.GetSongsResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSongsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.songs.Song.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Song songs = 1;
 * @return {!Array<!proto.songs.Song>}
 */
proto.songs.GetSongsResponse.prototype.getSongsList = function() {
  return /** @type{!Array<!proto.songs.Song>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.songs.Song, 1));
};


/**
 * @param {!Array<!proto.songs.Song>} value
 * @return {!proto.songs.GetSongsResponse} returns this
*/
proto.songs.GetSongsResponse.prototype.setSongsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.songs.Song=} opt_value
 * @param {number=} opt_index
 * @return {!proto.songs.Song}
 */
proto.songs.GetSongsResponse.prototype.addSongs = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.songs.Song, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.songs.GetSongsResponse} returns this
 */
proto.songs.GetSongsResponse.prototype.clearSongsList = function() {
  return this.setSongsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.songs.AddSongsRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.songs.AddSongsRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.songs.AddSongsRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.songs.AddSongsRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    song: (f = msg.getSong()) && proto.songs.Song.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.songs.AddSongsRequest}
 */
proto.songs.AddSongsRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.songs.AddSongsRequest;
  return proto.songs.AddSongsRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.songs.AddSongsRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.songs.AddSongsRequest}
 */
proto.songs.AddSongsRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.songs.Song;
      reader.readMessage(value,proto.songs.Song.deserializeBinaryFromReader);
      msg.setSong(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.songs.AddSongsRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.songs.AddSongsRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.songs.AddSongsRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.songs.AddSongsRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSong();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.songs.Song.serializeBinaryToWriter
    );
  }
};


/**
 * optional Song song = 1;
 * @return {?proto.songs.Song}
 */
proto.songs.AddSongsRequest.prototype.getSong = function() {
  return /** @type{?proto.songs.Song} */ (
    jspb.Message.getWrapperField(this, proto.songs.Song, 1));
};


/**
 * @param {?proto.songs.Song|undefined} value
 * @return {!proto.songs.AddSongsRequest} returns this
*/
proto.songs.AddSongsRequest.prototype.setSong = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.songs.AddSongsRequest} returns this
 */
proto.songs.AddSongsRequest.prototype.clearSong = function() {
  return this.setSong(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.songs.AddSongsRequest.prototype.hasSong = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.songs.AddSongsResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.songs.AddSongsResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.songs.AddSongsResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.songs.AddSongsResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    song: (f = msg.getSong()) && proto.songs.Song.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.songs.AddSongsResponse}
 */
proto.songs.AddSongsResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.songs.AddSongsResponse;
  return proto.songs.AddSongsResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.songs.AddSongsResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.songs.AddSongsResponse}
 */
proto.songs.AddSongsResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.songs.Song;
      reader.readMessage(value,proto.songs.Song.deserializeBinaryFromReader);
      msg.setSong(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.songs.AddSongsResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.songs.AddSongsResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.songs.AddSongsResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.songs.AddSongsResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSong();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.songs.Song.serializeBinaryToWriter
    );
  }
};


/**
 * optional Song song = 1;
 * @return {?proto.songs.Song}
 */
proto.songs.AddSongsResponse.prototype.getSong = function() {
  return /** @type{?proto.songs.Song} */ (
    jspb.Message.getWrapperField(this, proto.songs.Song, 1));
};


/**
 * @param {?proto.songs.Song|undefined} value
 * @return {!proto.songs.AddSongsResponse} returns this
*/
proto.songs.AddSongsResponse.prototype.setSong = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.songs.AddSongsResponse} returns this
 */
proto.songs.AddSongsResponse.prototype.clearSong = function() {
  return this.setSong(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.songs.AddSongsResponse.prototype.hasSong = function() {
  return jspb.Message.getField(this, 1) != null;
};


goog.object.extend(exports, proto.songs);
